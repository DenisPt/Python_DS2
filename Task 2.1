{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 1\n",
    "\n",
    "Импортируйте библиотеку Numpy и дайте ей псевдоним np.\n",
    "Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6, 8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение. Затем найдите среднее значение по каждому признаку, используя метод mean массива Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2. , 8.4])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = np.array([[1, 2, 3, 3, 1], [6, 8, 11, 10, 7]])\n",
    "mean_a=np.mean(a, axis=1)\n",
    "mean_a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 2\n",
    "Вычислите массив a_centered, отняв от значений массива “а” средние значения соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно производиться в одно действие. Получившийся массив должен иметь размер 5x2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1. ,  0. ,  1. ,  1. , -1. ],\n",
       "       [-2.4, -0.4,  2.6,  1.6, -1.4]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_centered = a - mean_a.reshape(2, 1)\n",
    "a_centered"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 3\n",
    "\n",
    "Найдите скалярное произведение столбцов массива a_centered. В результате должна получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a_centered_sp = np.dot(a_centered[0], a_centered[1])\n",
    "a_centered_sp / (a_centered.shape[1] - 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 4**\n",
    "Число, которое мы получили в конце задания 3 является ковариацией двух признаков, содержащихся в массиве “а”. В задании 4 мы делили сумму произведений центрированных признаков на N-1, а не на N, поэтому полученная нами величина является несмещенной оценкой ковариации.\n",
    "Подробнее узнать о ковариации можно здесь:\n",
    "Выборочная ковариация и выборочная дисперсия — Студопедия\n",
    "В этом задании проверьте получившееся число, вычислив ковариацию еще одним способом - с помощью функции np.cov. В качестве аргумента m функция np.cov должна принимать транспонированный массив “a”. В получившейся ковариационной матрице (массив Numpy размером 2x2) искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1.  2. ]\n",
      " [2.  4.3]]\n",
      "2.0\n"
     ]
    }
   ],
   "source": [
    "print(np.cov(a))\n",
    "print(np.cov(a)[0][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 5**\n",
    "Создайте одномерный массив z случайных целых чисел из равномерного распределения от -50 до 50 включительно размерности 8. Найдите индексы положительных объектов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "z = [-22  41  17 -49  35 -36 -19 -23]\n",
      "положительные индексы = [1 2 4]\n"
     ]
    }
   ],
   "source": [
    "z = np.random.randint(-50, 51, 8)\n",
    "print('z = ' + str(z))\n",
    "print('положительные индексы = ' + str(np.where(z > 0)[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 6**\n",
    "Создайте двумерный массив X случайных равномерно распределенных целых чисел от 0 до 255 включительно размерности 10 на 5. (Здесь снова считаем, что каждый столбец - это признак, а строка - наблюдение.)\n",
    "Найдите среднее значение и стандартное отклонение по каждому признаку.\n",
    "Вычислите массив X_standard, отняв от каждого признака среднее и поделив на стандартное отклонение.\n",
    "Убедитесь, что теперь среднее в каждом признаке стало равное нулю, а стандартное отклонение равно единице.\n",
    "Это называется стандартизация данных - важный процесс подготовки данных. Более подробно можно почитать здесь (https://wiki.loginom.ru/articles/data-standartization.html)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[204, 252,  55,  99, 112],\n",
       "       [134,  92, 240,  53, 107],\n",
       "       [162,  45, 136, 132, 165],\n",
       "       [ 24,  95,  51, 113, 117],\n",
       "       [250,  62, 148, 123, 181],\n",
       "       [ 11,  62, 100, 147, 160],\n",
       "       [190,  85, 146,  66, 207],\n",
       "       [216, 198, 160,  32, 176],\n",
       "       [ 86, 168, 167, 166, 123],\n",
       "       [ 56,  17, 148,  37,  28]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.random.randint(0, 256, (10, 5))\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.87955395,  2.04477613, -1.51877614,  0.04901784, -0.52620566],\n",
       "       [ 0.00870845, -0.22090379,  1.98900895, -0.97590056, -0.6289802 ],\n",
       "       [ 0.35704665, -0.88644727,  0.0170649 ,  0.78428538,  0.5632045 ],\n",
       "       [-1.35976304, -0.17842229, -1.59462014,  0.36094952, -0.42343112],\n",
       "       [ 1.45182385, -0.64571878,  0.24459691,  0.58375787,  0.89208303],\n",
       "       [-1.52149149, -0.64571878, -0.66553112,  1.1184979 ,  0.46042995],\n",
       "       [ 0.70538485, -0.32002729,  0.2066749 , -0.68624971,  1.42651066],\n",
       "       [ 1.02884175,  1.28010916,  0.47212891, -1.44379808,  0.78930849],\n",
       "       [-0.58844274,  0.85529417,  0.60485591,  1.54183376, -0.30010167],\n",
       "       [-0.96166224, -1.28294126,  0.24459691, -1.33239391, -2.25281798]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_standart = (X - np.mean(X, axis=0)) / np.std(X, axis=0)\n",
    "X_standart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "среднее по признакам: [-1.11022302e-16  4.44089210e-17  1.08246745e-16  8.88178420e-17\n",
      "  1.33226763e-16]\n",
      "отклонение по признакам: [1. 1. 1. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "print(\"среднее по признакам: \" + str(np.mean(X_standart, axis=0)))\n",
    "print(\"отклонение по признакам: \" + str(np.std(X_standart, axis=0)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В 1-й строке не совсем равны 0, проблема с округлением, т.к. это 16 знаков после запятой - не так критично"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 7**\n",
    "Создайте два одномерных массива размерности 512 с любыми значениями. Будем считать, что каждый массив - это наблюдение с 512 признаками. \n",
    "Найдите разницу между двумя массивами. Далее возведите разницу в квадрат, просуммируйте все элементы нового массива и возьмите корень квадратный.\n",
    "Это получилась L2-норма (Евклидова метрика) — функция расстояния, благодаря которой можно считать насколько далеки точки друг от друга, насколько они похожи друг на друга. Более подробно здесь (https://wiki.loginom.ru/articles/euclid-distance.html)\n",
    "Посчитайте L2 норму для этих двух массивов с помощью numpy.linalg."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.31880755364143"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_1 = np.random.sample(512)\n",
    "x_2 = np.random.sample(512)\n",
    "np.sqrt(np.sum(np.power(x_1 - x_2, 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9.31880755364143"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.norm(x_1 - x_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Задание 8**\n",
    "Используйте ранее созданный массив X.\n",
    "Найдите минимальное значение и максимальное по каждому признаку.\n",
    "Вычислите массив X_norm, отняв от каждого признака минимальное и поделив на разницу максимального и минимального.\n",
    "Убедитесь, что теперь минимальное значение стало равно 0, а максимальное - 1.\n",
    "Это называется нормализация данных - еще один из важных процессов подготовки данных. Более подробно здесь (https://wiki.loginom.ru/articles/data-normalization.html)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.80753138, 1.        , 0.02116402, 0.5       , 0.46927374],\n",
       "       [0.51464435, 0.31914894, 1.        , 0.15671642, 0.44134078],\n",
       "       [0.63179916, 0.11914894, 0.44973545, 0.74626866, 0.76536313],\n",
       "       [0.05439331, 0.33191489, 0.        , 0.60447761, 0.4972067 ],\n",
       "       [1.        , 0.19148936, 0.51322751, 0.67910448, 0.8547486 ],\n",
       "       [0.        , 0.19148936, 0.25925926, 0.85820896, 0.73743017],\n",
       "       [0.74895397, 0.2893617 , 0.5026455 , 0.25373134, 1.        ],\n",
       "       [0.85774059, 0.77021277, 0.57671958, 0.        , 0.82681564],\n",
       "       [0.31380753, 0.64255319, 0.61375661, 1.        , 0.53072626],\n",
       "       [0.18828452, 0.        , 0.51322751, 0.03731343, 0.        ]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_norm = (X - np.min(X, axis=0))/(np.max(X, axis=0) - np.min(X, axis=0))\n",
    "X_norm"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
